I need you to refactor and optimize our existing Hotel Management System front-end—do not scaffold or initialize a new project; apply all changes directly to the current codebase. Focus solely on decoupling from any backend, making the UI fully REST-API ready, and ensuring any developer (even a beginner) can plug in new endpoints, pop-ups, screens, layouts, or messages in minutes. Execute all steps straight through without pausing for confirmation:

1. PROJECT STRUCTURE & STYLING CONVENTIONS  
   - **Update** the existing folder structure to a feature-based layout (e.g. `/features/room`, `/features/booking`, `/features/staff`, `/shared/components`, `/shared/hooks`, `/shared/services`).  
   - Enforce naming conventions in the current files: PascalCase for components, camelCase for hooks/services, kebab-case for filenames.  
   - Centralize Tailwind theme tokens (colors, spacing, typography) in the existing `tailwind.config.js` and reference them via custom utility classes (e.g. `btn-primary`, `card`, `form-field`).

2. GENERIC UI COMPONENTS  
   - In `/shared/components`, **add or enhance** reusable primitives: `<Button>`, `<Input>`, `<Select>`, `<Modal>`, `<Table>`, `<Notification>`. Each should accept props for labels, variants, sizes, loading, and error states.  
   - Ensure these components are fully responsive and use the existing design tokens.  
   - Document their prop types with JSDoc or TypeScript interfaces in the same files.

3. API SERVICE LAYER  
   - In `/shared/services/api.ts` (or create it if missing), implement an `ApiClient` or `useApi()` wrapper around fetch/Axios with methods `.get<T>(url)`, `.post<T>(url, body)`, etc.  
   - Add interceptors for auth tokens, global error handling, and JSON parsing.  
   - In `/shared/services/bookingService.ts`, `roomService.ts`, etc., expose typed methods that call `ApiClient`.

4. STATE & DATA FETCHING  
   - Replace any inline fetch logic in existing components with React Query (or a small custom hook) for data caching, background refetch, and loading/error state.  
   - For example, use:  
     ```ts
     const { data, error, isLoading } = useQuery(['bookings'], () => bookingService.getAll())
     ```  
   - Show loading skeletons, error alerts, and “no data” placeholders.

5. GENERIC FORM HANDLING  
   - Create or update a `<Form>` wrapper in `/shared/components/Form.tsx` using React Hook Form or Formik.  
   - Use `<Form.Input>`, `<Form.Select>`, `<Form.TextArea>` subcomponents wired to a shared validation schema directory (`/shared/validation/*.schema.ts`).  
   - Ensure current form pages (RoomForm, GuestForm, BookingForm, StaffForm, SupportForm) adopt this centralized form handling.

6. ROUTING & LAYOUTS  
   - In the existing layout component, verify that `<AppLayout>` wraps `{children}` without memoization, ensuring full re-render on navigation.  
   - Centralize routes in `/app/routes.tsx` (or `pages/` if Next.js) using `<Link>`/`router.push` correctly.  
   - Provide a `<ProtectedRoute>` HOC or custom hook for auth guarding of pages.

7. ENVIRONMENT & CONFIG  
   - Ensure API base URL, timeouts, feature flags, and theme defaults are read from `.env.local` and exposed via `/shared/config.ts`.  
   - Remove any hard-coded URLs or magic strings in existing code.

8. DOCUMENTATION & DEVELOPER GUIDE  
   - Update the root `README.md` in the current project to include:  
     • Overview of the new folder structure  
     • How to add a new feature module (folder, service, hook, page, tests)  
     • How to plug in a new API endpoint (service method + component usage)  
     • Examples for using shared components, hooks, and validation schemas  

Please apply these refactors to our current project—do not generate a brand-new starter. Deliver the full set of updated file paths and code snippets in one pass, without mid-process confirmations.```
